name: Deploy CloudFormation (Smarter + Advanced Slack)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      STACK_NAME: MyS3BucketStack
      CHANGE_SET_NAME: GitChangeSet

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy CloudFormation Stack (Create or Update)
        run: |
          set -e

          STACK_EXISTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_EXIST")

          if [ "$STACK_EXISTS" = "NOT_EXIST" ]; then
            echo "Stack does not exist, creating new stack..."
            aws cloudformation create-stack               --stack-name $STACK_NAME               --template-body file://templates/my-s3-stack.yaml               --parameters ParameterKey=BucketName,ParameterValue=my-github-s3-cft-demo               --capabilities CAPABILITY_NAMED_IAM

            echo "Waiting for stack creation to complete..."
            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
            echo "✅ Stack created successfully."
          else
            echo "Stack exists, creating change set..."
            aws cloudformation create-change-set               --stack-name $STACK_NAME               --template-body file://templates/my-s3-stack.yaml               --parameters ParameterKey=BucketName,ParameterValue=my-github-s3-cft-demo               --capabilities CAPABILITY_NAMED_IAM               --change-set-name $CHANGE_SET_NAME || true

            echo "Waiting for Change Set to be ready..."
            while true; do
              STATUS=$(aws cloudformation describe-change-set --stack-name $STACK_NAME --change-set-name $CHANGE_SET_NAME --query 'Status' --output text)
              if [ "$STATUS" = "CREATE_COMPLETE" ]; then
                break
              elif [[ "$STATUS" == *FAILED* ]]; then
                CHANGE_SET_STATUS_REASON=$(aws cloudformation describe-change-set --stack-name $STACK_NAME --change-set-name $CHANGE_SET_NAME --query 'StatusReason' --output text)
                if [[ "$CHANGE_SET_STATUS_REASON" == *"didn't contain changes"* ]]; then
                  echo "No changes to apply. Skipping execution."
                  exit 0
                else
                  echo "Change Set Failed."
                  aws sns publish --topic-arn ${{ secrets.SNS_TOPIC_ARN }} --message "CloudFormation Change Set failed for $STACK_NAME: $CHANGE_SET_STATUS_REASON"
                  exit 1
                fi
              fi
              sleep 5
            done

            aws cloudformation execute-change-set --stack-name $STACK_NAME --change-set-name $CHANGE_SET_NAME
            echo "✅ Change Set executed successfully."
          fi

      - name: Slack Notification Success (Advanced)
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: *CloudFormation Deployment Succeeded!*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Stack Name:*\n${{ env.STACK_NAME }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\nSuccessfully Created/Updated"
                    }
                  ]
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Triggered from *GitHub Actions* :github:"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
